var async = require('async');
var PooledConnection2 = require('./lib/driver').PooledConnection2;

function stringToHex(s) {
  var buf = '';
  for (var i = 0; i < s.length; i++) {
    buf += s.charCodeAt(i).toString(16);
  }
  return buf;
}

/*

create keyspace Keyspace1 with strategy_class = SimpleStrategy and strategy_options:replication_factor=3;
use Keyspace1;
create columnfamily Standard1 (key ascii primary key);

cp -R /tmp/cass /tmp/cass.bak && cp -R /tmp/cass2 /tmp/cass2.bak && cp -R /tmp/cass3 /tmp/cass3.bak
 */


function testPooling(callback) {
  var con = new PooledConnection2({hosts: ['127.0.0.1:19170', '127.0.0.2:19170', '127.0.0.3:19170'],
//  var con = new PooledConnection({hosts: ['127.0.0.1:19170'],
                                    keyspace: 'Keyspace1',
                                    use_bigints: false});
  var counter = 0;
  async.whilst(function test() {
    return counter < 100;
  }, function doit(callback) {
    counter += 1;
    console.log(counter);
    con.execute('update Standard1 set ?=? where key=?', ['clusterCol0', 'value' + counter, stringToHex('clusterKey0')], function(err) {
      if (err) {
        callback(err);
      } else {
        con.execute('select * from Standard1', [], function(err) {
          if (err) {
            callback(err);
          } else {
            setTimeout(callback, 1000);
          }
        });
      }
    });
  }, function allDone(err) {
    console.log('donish');
    callback(err);
  });
}

testPooling(function(msg) {
  console.log(msg);
  process.exit(0);
});