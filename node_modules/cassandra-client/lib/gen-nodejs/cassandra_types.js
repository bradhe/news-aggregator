//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.ConsistencyLevel = {
'ONE' : 1,
'QUORUM' : 2,
'LOCAL_QUORUM' : 3,
'EACH_QUORUM' : 4,
'ALL' : 5,
'ANY' : 6,
'TWO' : 7,
'THREE' : 8
};
ttypes.IndexOperator = {
'EQ' : 0,
'GTE' : 1,
'GT' : 2,
'LTE' : 3,
'LT' : 4
};
ttypes.IndexType = {
'KEYS' : 0,
'CUSTOM' : 1
};
ttypes.Compression = {
'GZIP' : 1,
'NONE' : 2
};
ttypes.CqlResultType = {
'ROWS' : 1,
'VOID' : 2,
'INT' : 3
};
ttypes.VERSION = '19.19.0';
var Column = module.exports.Column = function(args) {
  this.name = null;
  this.value = null;
  this.timestamp = null;
  this.ttl = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.ttl !== undefined) {
      this.ttl = args.ttl;
    }
  }
};
Column.prototype = {};
Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.ttl = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Column.prototype.write = function(output) {
  output.writeStructBegin('Column');
  if (this.name != null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value != null) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp != null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.ttl != null) {
    output.writeFieldBegin('ttl', Thrift.Type.I32, 4);
    output.writeI32(this.ttl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuperColumn = module.exports.SuperColumn = function(args) {
  this.name = null;
  this.columns = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
SuperColumn.prototype = {};
SuperColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.columns = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Column();
          elem6.read(input);
          this.columns.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuperColumn.prototype.write = function(output) {
  output.writeStructBegin('SuperColumn');
  if (this.name != null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.columns != null) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter7 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter7))
      {
        iter7 = this.columns[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CounterColumn = module.exports.CounterColumn = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
CounterColumn.prototype = {};
CounterColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterColumn.prototype.write = function(output) {
  output.writeStructBegin('CounterColumn');
  if (this.name != null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value != null) {
    output.writeFieldBegin('value', Thrift.Type.I64, 2);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CounterSuperColumn = module.exports.CounterSuperColumn = function(args) {
  this.name = null;
  this.columns = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
CounterSuperColumn.prototype = {};
CounterSuperColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.columns = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.CounterColumn();
          elem14.read(input);
          this.columns.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterSuperColumn.prototype.write = function(output) {
  output.writeStructBegin('CounterSuperColumn');
  if (this.name != null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.columns != null) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter15 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter15))
      {
        iter15 = this.columns[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnOrSuperColumn = module.exports.ColumnOrSuperColumn = function(args) {
  this.column = null;
  this.super_column = null;
  this.counter_column = null;
  this.counter_super_column = null;
  if (args) {
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
    if (args.counter_column !== undefined) {
      this.counter_column = args.counter_column;
    }
    if (args.counter_super_column !== undefined) {
      this.counter_super_column = args.counter_super_column;
    }
  }
};
ColumnOrSuperColumn.prototype = {};
ColumnOrSuperColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.column = new ttypes.Column();
        this.column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.super_column = new ttypes.SuperColumn();
        this.super_column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.counter_column = new ttypes.CounterColumn();
        this.counter_column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.counter_super_column = new ttypes.CounterSuperColumn();
        this.counter_super_column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnOrSuperColumn.prototype.write = function(output) {
  output.writeStructBegin('ColumnOrSuperColumn');
  if (this.column != null) {
    output.writeFieldBegin('column', Thrift.Type.STRUCT, 1);
    this.column.write(output);
    output.writeFieldEnd();
  }
  if (this.super_column != null) {
    output.writeFieldBegin('super_column', Thrift.Type.STRUCT, 2);
    this.super_column.write(output);
    output.writeFieldEnd();
  }
  if (this.counter_column != null) {
    output.writeFieldBegin('counter_column', Thrift.Type.STRUCT, 3);
    this.counter_column.write(output);
    output.writeFieldEnd();
  }
  if (this.counter_super_column != null) {
    output.writeFieldBegin('counter_super_column', Thrift.Type.STRUCT, 4);
    this.counter_super_column.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotFoundException = module.exports.NotFoundException = function(args) {
  Thrift.TException.call(this, "NotFoundException")
  this.name = "NotFoundException"
};
Thrift.inherits(NotFoundException, Thrift.TException);
NotFoundException.prototype.name = 'NotFoundException';
NotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotFoundException.prototype.write = function(output) {
  output.writeStructBegin('NotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidRequestException = module.exports.InvalidRequestException = function(args) {
  Thrift.TException.call(this, "InvalidRequestException")
  this.name = "InvalidRequestException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidRequestException, Thrift.TException);
InvalidRequestException.prototype.name = 'InvalidRequestException';
InvalidRequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidRequestException.prototype.write = function(output) {
  output.writeStructBegin('InvalidRequestException');
  if (this.why != null) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnavailableException = module.exports.UnavailableException = function(args) {
  Thrift.TException.call(this, "UnavailableException")
  this.name = "UnavailableException"
};
Thrift.inherits(UnavailableException, Thrift.TException);
UnavailableException.prototype.name = 'UnavailableException';
UnavailableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnavailableException.prototype.write = function(output) {
  output.writeStructBegin('UnavailableException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimedOutException = module.exports.TimedOutException = function(args) {
  Thrift.TException.call(this, "TimedOutException")
  this.name = "TimedOutException"
};
Thrift.inherits(TimedOutException, Thrift.TException);
TimedOutException.prototype.name = 'TimedOutException';
TimedOutException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimedOutException.prototype.write = function(output) {
  output.writeStructBegin('TimedOutException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthenticationException = module.exports.AuthenticationException = function(args) {
  Thrift.TException.call(this, "AuthenticationException")
  this.name = "AuthenticationException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(AuthenticationException, Thrift.TException);
AuthenticationException.prototype.name = 'AuthenticationException';
AuthenticationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationException.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationException');
  if (this.why != null) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthorizationException = module.exports.AuthorizationException = function(args) {
  Thrift.TException.call(this, "AuthorizationException")
  this.name = "AuthorizationException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(AuthorizationException, Thrift.TException);
AuthorizationException.prototype.name = 'AuthorizationException';
AuthorizationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthorizationException.prototype.write = function(output) {
  output.writeStructBegin('AuthorizationException');
  if (this.why != null) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SchemaDisagreementException = module.exports.SchemaDisagreementException = function(args) {
  Thrift.TException.call(this, "SchemaDisagreementException")
  this.name = "SchemaDisagreementException"
};
Thrift.inherits(SchemaDisagreementException, Thrift.TException);
SchemaDisagreementException.prototype.name = 'SchemaDisagreementException';
SchemaDisagreementException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchemaDisagreementException.prototype.write = function(output) {
  output.writeStructBegin('SchemaDisagreementException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnParent = module.exports.ColumnParent = function(args) {
  this.column_family = null;
  this.super_column = null;
  if (args) {
    if (args.column_family !== undefined) {
      this.column_family = args.column_family;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
  }
};
ColumnParent.prototype = {};
ColumnParent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.super_column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnParent.prototype.write = function(output) {
  output.writeStructBegin('ColumnParent');
  if (this.column_family != null) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.super_column != null) {
    output.writeFieldBegin('super_column', Thrift.Type.STRING, 4);
    output.writeString(this.super_column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnPath = module.exports.ColumnPath = function(args) {
  this.column_family = null;
  this.super_column = null;
  this.column = null;
  if (args) {
    if (args.column_family !== undefined) {
      this.column_family = args.column_family;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
  }
};
ColumnPath.prototype = {};
ColumnPath.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.super_column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnPath.prototype.write = function(output) {
  output.writeStructBegin('ColumnPath');
  if (this.column_family != null) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.super_column != null) {
    output.writeFieldBegin('super_column', Thrift.Type.STRING, 4);
    output.writeString(this.super_column);
    output.writeFieldEnd();
  }
  if (this.column != null) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 5);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SliceRange = module.exports.SliceRange = function(args) {
  this.start = null;
  this.finish = null;
  this.reversed = false;
  this.count = 100;
  if (args) {
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.finish !== undefined) {
      this.finish = args.finish;
    }
    if (args.reversed !== undefined) {
      this.reversed = args.reversed;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
SliceRange.prototype = {};
SliceRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.finish = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.reversed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SliceRange.prototype.write = function(output) {
  output.writeStructBegin('SliceRange');
  if (this.start != null) {
    output.writeFieldBegin('start', Thrift.Type.STRING, 1);
    output.writeString(this.start);
    output.writeFieldEnd();
  }
  if (this.finish != null) {
    output.writeFieldBegin('finish', Thrift.Type.STRING, 2);
    output.writeString(this.finish);
    output.writeFieldEnd();
  }
  if (this.reversed != null) {
    output.writeFieldBegin('reversed', Thrift.Type.BOOL, 3);
    output.writeBool(this.reversed);
    output.writeFieldEnd();
  }
  if (this.count != null) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SlicePredicate = module.exports.SlicePredicate = function(args) {
  this.column_names = null;
  this.slice_range = null;
  if (args) {
    if (args.column_names !== undefined) {
      this.column_names = args.column_names;
    }
    if (args.slice_range !== undefined) {
      this.slice_range = args.slice_range;
    }
  }
};
SlicePredicate.prototype = {};
SlicePredicate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.column_names = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readBinary();
          this.column_names.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.slice_range = new ttypes.SliceRange();
        this.slice_range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SlicePredicate.prototype.write = function(output) {
  output.writeStructBegin('SlicePredicate');
  if (this.column_names != null) {
    output.writeFieldBegin('column_names', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
    for (var iter23 in this.column_names)
    {
      if (this.column_names.hasOwnProperty(iter23))
      {
        iter23 = this.column_names[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.slice_range != null) {
    output.writeFieldBegin('slice_range', Thrift.Type.STRUCT, 2);
    this.slice_range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IndexExpression = module.exports.IndexExpression = function(args) {
  this.column_name = null;
  this.op = null;
  this.value = null;
  if (args) {
    if (args.column_name !== undefined) {
      this.column_name = args.column_name;
    }
    if (args.op !== undefined) {
      this.op = args.op;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
IndexExpression.prototype = {};
IndexExpression.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.column_name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexExpression.prototype.write = function(output) {
  output.writeStructBegin('IndexExpression');
  if (this.column_name != null) {
    output.writeFieldBegin('column_name', Thrift.Type.STRING, 1);
    output.writeString(this.column_name);
    output.writeFieldEnd();
  }
  if (this.op != null) {
    output.writeFieldBegin('op', Thrift.Type.I32, 2);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.value != null) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IndexClause = module.exports.IndexClause = function(args) {
  this.expressions = null;
  this.start_key = null;
  this.count = 100;
  if (args) {
    if (args.expressions !== undefined) {
      this.expressions = args.expressions;
    }
    if (args.start_key !== undefined) {
      this.start_key = args.start_key;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
IndexClause.prototype = {};
IndexClause.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.expressions = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.IndexExpression();
          elem30.read(input);
          this.expressions.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.start_key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexClause.prototype.write = function(output) {
  output.writeStructBegin('IndexClause');
  if (this.expressions != null) {
    output.writeFieldBegin('expressions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.expressions.length);
    for (var iter31 in this.expressions)
    {
      if (this.expressions.hasOwnProperty(iter31))
      {
        iter31 = this.expressions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.start_key != null) {
    output.writeFieldBegin('start_key', Thrift.Type.STRING, 2);
    output.writeString(this.start_key);
    output.writeFieldEnd();
  }
  if (this.count != null) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyRange = module.exports.KeyRange = function(args) {
  this.start_key = null;
  this.end_key = null;
  this.start_token = null;
  this.end_token = null;
  this.count = 100;
  if (args) {
    if (args.start_key !== undefined) {
      this.start_key = args.start_key;
    }
    if (args.end_key !== undefined) {
      this.end_key = args.end_key;
    }
    if (args.start_token !== undefined) {
      this.start_token = args.start_token;
    }
    if (args.end_token !== undefined) {
      this.end_token = args.end_token;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
KeyRange.prototype = {};
KeyRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.start_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.end_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyRange.prototype.write = function(output) {
  output.writeStructBegin('KeyRange');
  if (this.start_key != null) {
    output.writeFieldBegin('start_key', Thrift.Type.STRING, 1);
    output.writeString(this.start_key);
    output.writeFieldEnd();
  }
  if (this.end_key != null) {
    output.writeFieldBegin('end_key', Thrift.Type.STRING, 2);
    output.writeString(this.end_key);
    output.writeFieldEnd();
  }
  if (this.start_token != null) {
    output.writeFieldBegin('start_token', Thrift.Type.STRING, 3);
    output.writeString(this.start_token);
    output.writeFieldEnd();
  }
  if (this.end_token != null) {
    output.writeFieldBegin('end_token', Thrift.Type.STRING, 4);
    output.writeString(this.end_token);
    output.writeFieldEnd();
  }
  if (this.count != null) {
    output.writeFieldBegin('count', Thrift.Type.I32, 5);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeySlice = module.exports.KeySlice = function(args) {
  this.key = null;
  this.columns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
KeySlice.prototype = {};
KeySlice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.columns = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.ColumnOrSuperColumn();
          elem38.read(input);
          this.columns.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeySlice.prototype.write = function(output) {
  output.writeStructBegin('KeySlice');
  if (this.key != null) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.columns != null) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter39 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter39))
      {
        iter39 = this.columns[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyCount = module.exports.KeyCount = function(args) {
  this.key = null;
  this.count = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
KeyCount.prototype = {};
KeyCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyCount.prototype.write = function(output) {
  output.writeStructBegin('KeyCount');
  if (this.key != null) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.count != null) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Deletion = module.exports.Deletion = function(args) {
  this.timestamp = null;
  this.super_column = null;
  this.predicate = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
    if (args.predicate !== undefined) {
      this.predicate = args.predicate;
    }
  }
};
Deletion.prototype = {};
Deletion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.super_column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.predicate = new ttypes.SlicePredicate();
        this.predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Deletion.prototype.write = function(output) {
  output.writeStructBegin('Deletion');
  if (this.timestamp != null) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.super_column != null) {
    output.writeFieldBegin('super_column', Thrift.Type.STRING, 2);
    output.writeString(this.super_column);
    output.writeFieldEnd();
  }
  if (this.predicate != null) {
    output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 3);
    this.predicate.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Mutation = module.exports.Mutation = function(args) {
  this.column_or_supercolumn = null;
  this.deletion = null;
  if (args) {
    if (args.column_or_supercolumn !== undefined) {
      this.column_or_supercolumn = args.column_or_supercolumn;
    }
    if (args.deletion !== undefined) {
      this.deletion = args.deletion;
    }
  }
};
Mutation.prototype = {};
Mutation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_or_supercolumn = new ttypes.ColumnOrSuperColumn();
        this.column_or_supercolumn.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.deletion = new ttypes.Deletion();
        this.deletion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mutation.prototype.write = function(output) {
  output.writeStructBegin('Mutation');
  if (this.column_or_supercolumn != null) {
    output.writeFieldBegin('column_or_supercolumn', Thrift.Type.STRUCT, 1);
    this.column_or_supercolumn.write(output);
    output.writeFieldEnd();
  }
  if (this.deletion != null) {
    output.writeFieldBegin('deletion', Thrift.Type.STRUCT, 2);
    this.deletion.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EndpointDetails = module.exports.EndpointDetails = function(args) {
  this.host = null;
  this.datacenter = null;
  this.rack = null;
  if (args) {
    if (args.host !== undefined) {
      this.host = args.host;
    }
    if (args.datacenter !== undefined) {
      this.datacenter = args.datacenter;
    }
    if (args.rack !== undefined) {
      this.rack = args.rack;
    }
  }
};
EndpointDetails.prototype = {};
EndpointDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.datacenter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rack = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EndpointDetails.prototype.write = function(output) {
  output.writeStructBegin('EndpointDetails');
  if (this.host != null) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.datacenter != null) {
    output.writeFieldBegin('datacenter', Thrift.Type.STRING, 2);
    output.writeString(this.datacenter);
    output.writeFieldEnd();
  }
  if (this.rack != null) {
    output.writeFieldBegin('rack', Thrift.Type.STRING, 3);
    output.writeString(this.rack);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenRange = module.exports.TokenRange = function(args) {
  this.start_token = null;
  this.end_token = null;
  this.endpoints = null;
  this.rpc_endpoints = null;
  this.endpoint_details = null;
  if (args) {
    if (args.start_token !== undefined) {
      this.start_token = args.start_token;
    }
    if (args.end_token !== undefined) {
      this.end_token = args.end_token;
    }
    if (args.endpoints !== undefined) {
      this.endpoints = args.endpoints;
    }
    if (args.rpc_endpoints !== undefined) {
      this.rpc_endpoints = args.rpc_endpoints;
    }
    if (args.endpoint_details !== undefined) {
      this.endpoint_details = args.endpoint_details;
    }
  }
};
TokenRange.prototype = {};
TokenRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.endpoints = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.endpoints.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size47 = 0;
        var _rtmp351;
        this.rpc_endpoints = [];
        var _etype50 = 0;
        _rtmp351 = input.readListBegin();
        _etype50 = _rtmp351.etype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var elem53 = null;
          elem53 = input.readString();
          this.rpc_endpoints.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.endpoint_details = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = new ttypes.EndpointDetails();
          elem60.read(input);
          this.endpoint_details.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenRange.prototype.write = function(output) {
  output.writeStructBegin('TokenRange');
  if (this.start_token != null) {
    output.writeFieldBegin('start_token', Thrift.Type.STRING, 1);
    output.writeString(this.start_token);
    output.writeFieldEnd();
  }
  if (this.end_token != null) {
    output.writeFieldBegin('end_token', Thrift.Type.STRING, 2);
    output.writeString(this.end_token);
    output.writeFieldEnd();
  }
  if (this.endpoints != null) {
    output.writeFieldBegin('endpoints', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.endpoints.length);
    for (var iter61 in this.endpoints)
    {
      if (this.endpoints.hasOwnProperty(iter61))
      {
        iter61 = this.endpoints[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rpc_endpoints != null) {
    output.writeFieldBegin('rpc_endpoints', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.rpc_endpoints.length);
    for (var iter62 in this.rpc_endpoints)
    {
      if (this.rpc_endpoints.hasOwnProperty(iter62))
      {
        iter62 = this.rpc_endpoints[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.endpoint_details != null) {
    output.writeFieldBegin('endpoint_details', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.endpoint_details.length);
    for (var iter63 in this.endpoint_details)
    {
      if (this.endpoint_details.hasOwnProperty(iter63))
      {
        iter63 = this.endpoint_details[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthenticationRequest = module.exports.AuthenticationRequest = function(args) {
  this.credentials = null;
  if (args) {
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
AuthenticationRequest.prototype = {};
AuthenticationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size64 = 0;
        var _rtmp368;
        this.credentials = {};
        var _ktype65 = 0;
        var _vtype66 = 0;
        _rtmp368 = input.readMapBegin();
        _ktype65 = _rtmp368.ktype;
        _vtype66 = _rtmp368.vtype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var key70 = null;
          var val71 = null;
          key70 = input.readString();
          val71 = input.readString();
          this.credentials[key70] = val71;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationRequest.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationRequest');
  if (this.credentials != null) {
    output.writeFieldBegin('credentials', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.credentials));
    for (var kiter72 in this.credentials)
    {
      if (this.credentials.hasOwnProperty(kiter72))
      {
        var viter73 = this.credentials[kiter72];
        output.writeString(kiter72);
        output.writeString(viter73);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ColumnDef = module.exports.ColumnDef = function(args) {
  this.name = null;
  this.validation_class = null;
  this.index_type = null;
  this.index_name = null;
  this.index_options = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.validation_class !== undefined) {
      this.validation_class = args.validation_class;
    }
    if (args.index_type !== undefined) {
      this.index_type = args.index_type;
    }
    if (args.index_name !== undefined) {
      this.index_name = args.index_name;
    }
    if (args.index_options !== undefined) {
      this.index_options = args.index_options;
    }
  }
};
ColumnDef.prototype = {};
ColumnDef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.validation_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size74 = 0;
        var _rtmp378;
        this.index_options = {};
        var _ktype75 = 0;
        var _vtype76 = 0;
        _rtmp378 = input.readMapBegin();
        _ktype75 = _rtmp378.ktype;
        _vtype76 = _rtmp378.vtype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var key80 = null;
          var val81 = null;
          key80 = input.readString();
          val81 = input.readString();
          this.index_options[key80] = val81;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnDef.prototype.write = function(output) {
  output.writeStructBegin('ColumnDef');
  if (this.name != null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.validation_class != null) {
    output.writeFieldBegin('validation_class', Thrift.Type.STRING, 2);
    output.writeString(this.validation_class);
    output.writeFieldEnd();
  }
  if (this.index_type != null) {
    output.writeFieldBegin('index_type', Thrift.Type.I32, 3);
    output.writeI32(this.index_type);
    output.writeFieldEnd();
  }
  if (this.index_name != null) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 4);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  if (this.index_options != null) {
    output.writeFieldBegin('index_options', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.index_options));
    for (var kiter82 in this.index_options)
    {
      if (this.index_options.hasOwnProperty(kiter82))
      {
        var viter83 = this.index_options[kiter82];
        output.writeString(kiter82);
        output.writeString(viter83);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CfDef = module.exports.CfDef = function(args) {
  this.keyspace = null;
  this.name = null;
  this.column_type = 'Standard';
  this.comparator_type = 'BytesType';
  this.subcomparator_type = null;
  this.comment = null;
  this.row_cache_size = 0;
  this.key_cache_size = 200000;
  this.read_repair_chance = 1;
  this.column_metadata = null;
  this.gc_grace_seconds = null;
  this.default_validation_class = null;
  this.id = null;
  this.min_compaction_threshold = null;
  this.max_compaction_threshold = null;
  this.row_cache_save_period_in_seconds = null;
  this.key_cache_save_period_in_seconds = null;
  this.replicate_on_write = null;
  this.merge_shards_chance = null;
  this.key_validation_class = null;
  this.row_cache_provider = null;
  this.key_alias = null;
  this.compaction_strategy = null;
  this.compaction_strategy_options = null;
  this.row_cache_keys_to_save = null;
  this.compression_options = null;
  if (args) {
    if (args.keyspace !== undefined) {
      this.keyspace = args.keyspace;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.column_type !== undefined) {
      this.column_type = args.column_type;
    }
    if (args.comparator_type !== undefined) {
      this.comparator_type = args.comparator_type;
    }
    if (args.subcomparator_type !== undefined) {
      this.subcomparator_type = args.subcomparator_type;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
    if (args.row_cache_size !== undefined) {
      this.row_cache_size = args.row_cache_size;
    }
    if (args.key_cache_size !== undefined) {
      this.key_cache_size = args.key_cache_size;
    }
    if (args.read_repair_chance !== undefined) {
      this.read_repair_chance = args.read_repair_chance;
    }
    if (args.column_metadata !== undefined) {
      this.column_metadata = args.column_metadata;
    }
    if (args.gc_grace_seconds !== undefined) {
      this.gc_grace_seconds = args.gc_grace_seconds;
    }
    if (args.default_validation_class !== undefined) {
      this.default_validation_class = args.default_validation_class;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.min_compaction_threshold !== undefined) {
      this.min_compaction_threshold = args.min_compaction_threshold;
    }
    if (args.max_compaction_threshold !== undefined) {
      this.max_compaction_threshold = args.max_compaction_threshold;
    }
    if (args.row_cache_save_period_in_seconds !== undefined) {
      this.row_cache_save_period_in_seconds = args.row_cache_save_period_in_seconds;
    }
    if (args.key_cache_save_period_in_seconds !== undefined) {
      this.key_cache_save_period_in_seconds = args.key_cache_save_period_in_seconds;
    }
    if (args.replicate_on_write !== undefined) {
      this.replicate_on_write = args.replicate_on_write;
    }
    if (args.merge_shards_chance !== undefined) {
      this.merge_shards_chance = args.merge_shards_chance;
    }
    if (args.key_validation_class !== undefined) {
      this.key_validation_class = args.key_validation_class;
    }
    if (args.row_cache_provider !== undefined) {
      this.row_cache_provider = args.row_cache_provider;
    }
    if (args.key_alias !== undefined) {
      this.key_alias = args.key_alias;
    }
    if (args.compaction_strategy !== undefined) {
      this.compaction_strategy = args.compaction_strategy;
    }
    if (args.compaction_strategy_options !== undefined) {
      this.compaction_strategy_options = args.compaction_strategy_options;
    }
    if (args.row_cache_keys_to_save !== undefined) {
      this.row_cache_keys_to_save = args.row_cache_keys_to_save;
    }
    if (args.compression_options !== undefined) {
      this.compression_options = args.compression_options;
    }
  }
};
CfDef.prototype = {};
CfDef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyspace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.comparator_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.subcomparator_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.row_cache_size = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.key_cache_size = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.read_repair_chance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.column_metadata = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new ttypes.ColumnDef();
          elem90.read(input);
          this.column_metadata.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.gc_grace_seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.default_validation_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.min_compaction_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.max_compaction_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.row_cache_save_period_in_seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.key_cache_save_period_in_seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.replicate_on_write = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.DOUBLE) {
        this.merge_shards_chance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.key_validation_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.row_cache_provider = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.key_alias = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.compaction_strategy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.MAP) {
        var _size91 = 0;
        var _rtmp395;
        this.compaction_strategy_options = {};
        var _ktype92 = 0;
        var _vtype93 = 0;
        _rtmp395 = input.readMapBegin();
        _ktype92 = _rtmp395.ktype;
        _vtype93 = _rtmp395.vtype;
        _size91 = _rtmp395.size;
        for (var _i96 = 0; _i96 < _size91; ++_i96)
        {
          var key97 = null;
          var val98 = null;
          key97 = input.readString();
          val98 = input.readString();
          this.compaction_strategy_options[key97] = val98;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.row_cache_keys_to_save = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.MAP) {
        var _size99 = 0;
        var _rtmp3103;
        this.compression_options = {};
        var _ktype100 = 0;
        var _vtype101 = 0;
        _rtmp3103 = input.readMapBegin();
        _ktype100 = _rtmp3103.ktype;
        _vtype101 = _rtmp3103.vtype;
        _size99 = _rtmp3103.size;
        for (var _i104 = 0; _i104 < _size99; ++_i104)
        {
          var key105 = null;
          var val106 = null;
          key105 = input.readString();
          val106 = input.readString();
          this.compression_options[key105] = val106;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CfDef.prototype.write = function(output) {
  output.writeStructBegin('CfDef');
  if (this.keyspace != null) {
    output.writeFieldBegin('keyspace', Thrift.Type.STRING, 1);
    output.writeString(this.keyspace);
    output.writeFieldEnd();
  }
  if (this.name != null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.column_type != null) {
    output.writeFieldBegin('column_type', Thrift.Type.STRING, 3);
    output.writeString(this.column_type);
    output.writeFieldEnd();
  }
  if (this.comparator_type != null) {
    output.writeFieldBegin('comparator_type', Thrift.Type.STRING, 5);
    output.writeString(this.comparator_type);
    output.writeFieldEnd();
  }
  if (this.subcomparator_type != null) {
    output.writeFieldBegin('subcomparator_type', Thrift.Type.STRING, 6);
    output.writeString(this.subcomparator_type);
    output.writeFieldEnd();
  }
  if (this.comment != null) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 8);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.row_cache_size != null) {
    output.writeFieldBegin('row_cache_size', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.row_cache_size);
    output.writeFieldEnd();
  }
  if (this.key_cache_size != null) {
    output.writeFieldBegin('key_cache_size', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.key_cache_size);
    output.writeFieldEnd();
  }
  if (this.read_repair_chance != null) {
    output.writeFieldBegin('read_repair_chance', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.read_repair_chance);
    output.writeFieldEnd();
  }
  if (this.column_metadata != null) {
    output.writeFieldBegin('column_metadata', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.column_metadata.length);
    for (var iter107 in this.column_metadata)
    {
      if (this.column_metadata.hasOwnProperty(iter107))
      {
        iter107 = this.column_metadata[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.gc_grace_seconds != null) {
    output.writeFieldBegin('gc_grace_seconds', Thrift.Type.I32, 14);
    output.writeI32(this.gc_grace_seconds);
    output.writeFieldEnd();
  }
  if (this.default_validation_class != null) {
    output.writeFieldBegin('default_validation_class', Thrift.Type.STRING, 15);
    output.writeString(this.default_validation_class);
    output.writeFieldEnd();
  }
  if (this.id != null) {
    output.writeFieldBegin('id', Thrift.Type.I32, 16);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.min_compaction_threshold != null) {
    output.writeFieldBegin('min_compaction_threshold', Thrift.Type.I32, 17);
    output.writeI32(this.min_compaction_threshold);
    output.writeFieldEnd();
  }
  if (this.max_compaction_threshold != null) {
    output.writeFieldBegin('max_compaction_threshold', Thrift.Type.I32, 18);
    output.writeI32(this.max_compaction_threshold);
    output.writeFieldEnd();
  }
  if (this.row_cache_save_period_in_seconds != null) {
    output.writeFieldBegin('row_cache_save_period_in_seconds', Thrift.Type.I32, 19);
    output.writeI32(this.row_cache_save_period_in_seconds);
    output.writeFieldEnd();
  }
  if (this.key_cache_save_period_in_seconds != null) {
    output.writeFieldBegin('key_cache_save_period_in_seconds', Thrift.Type.I32, 20);
    output.writeI32(this.key_cache_save_period_in_seconds);
    output.writeFieldEnd();
  }
  if (this.replicate_on_write != null) {
    output.writeFieldBegin('replicate_on_write', Thrift.Type.BOOL, 24);
    output.writeBool(this.replicate_on_write);
    output.writeFieldEnd();
  }
  if (this.merge_shards_chance != null) {
    output.writeFieldBegin('merge_shards_chance', Thrift.Type.DOUBLE, 25);
    output.writeDouble(this.merge_shards_chance);
    output.writeFieldEnd();
  }
  if (this.key_validation_class != null) {
    output.writeFieldBegin('key_validation_class', Thrift.Type.STRING, 26);
    output.writeString(this.key_validation_class);
    output.writeFieldEnd();
  }
  if (this.row_cache_provider != null) {
    output.writeFieldBegin('row_cache_provider', Thrift.Type.STRING, 27);
    output.writeString(this.row_cache_provider);
    output.writeFieldEnd();
  }
  if (this.key_alias != null) {
    output.writeFieldBegin('key_alias', Thrift.Type.STRING, 28);
    output.writeString(this.key_alias);
    output.writeFieldEnd();
  }
  if (this.compaction_strategy != null) {
    output.writeFieldBegin('compaction_strategy', Thrift.Type.STRING, 29);
    output.writeString(this.compaction_strategy);
    output.writeFieldEnd();
  }
  if (this.compaction_strategy_options != null) {
    output.writeFieldBegin('compaction_strategy_options', Thrift.Type.MAP, 30);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.compaction_strategy_options));
    for (var kiter108 in this.compaction_strategy_options)
    {
      if (this.compaction_strategy_options.hasOwnProperty(kiter108))
      {
        var viter109 = this.compaction_strategy_options[kiter108];
        output.writeString(kiter108);
        output.writeString(viter109);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.row_cache_keys_to_save != null) {
    output.writeFieldBegin('row_cache_keys_to_save', Thrift.Type.I32, 31);
    output.writeI32(this.row_cache_keys_to_save);
    output.writeFieldEnd();
  }
  if (this.compression_options != null) {
    output.writeFieldBegin('compression_options', Thrift.Type.MAP, 32);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.compression_options));
    for (var kiter110 in this.compression_options)
    {
      if (this.compression_options.hasOwnProperty(kiter110))
      {
        var viter111 = this.compression_options[kiter110];
        output.writeString(kiter110);
        output.writeString(viter111);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KsDef = module.exports.KsDef = function(args) {
  this.name = null;
  this.strategy_class = null;
  this.strategy_options = null;
  this.replication_factor = null;
  this.cf_defs = null;
  this.durable_writes = true;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.strategy_class !== undefined) {
      this.strategy_class = args.strategy_class;
    }
    if (args.strategy_options !== undefined) {
      this.strategy_options = args.strategy_options;
    }
    if (args.replication_factor !== undefined) {
      this.replication_factor = args.replication_factor;
    }
    if (args.cf_defs !== undefined) {
      this.cf_defs = args.cf_defs;
    }
    if (args.durable_writes !== undefined) {
      this.durable_writes = args.durable_writes;
    }
  }
};
KsDef.prototype = {};
KsDef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.strategy_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size112 = 0;
        var _rtmp3116;
        this.strategy_options = {};
        var _ktype113 = 0;
        var _vtype114 = 0;
        _rtmp3116 = input.readMapBegin();
        _ktype113 = _rtmp3116.ktype;
        _vtype114 = _rtmp3116.vtype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var key118 = null;
          var val119 = null;
          key118 = input.readString();
          val119 = input.readString();
          this.strategy_options[key118] = val119;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.replication_factor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.cf_defs = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.CfDef();
          elem126.read(input);
          this.cf_defs.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.durable_writes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KsDef.prototype.write = function(output) {
  output.writeStructBegin('KsDef');
  if (this.name != null) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.strategy_class != null) {
    output.writeFieldBegin('strategy_class', Thrift.Type.STRING, 2);
    output.writeString(this.strategy_class);
    output.writeFieldEnd();
  }
  if (this.strategy_options != null) {
    output.writeFieldBegin('strategy_options', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.strategy_options));
    for (var kiter127 in this.strategy_options)
    {
      if (this.strategy_options.hasOwnProperty(kiter127))
      {
        var viter128 = this.strategy_options[kiter127];
        output.writeString(kiter127);
        output.writeString(viter128);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.replication_factor != null) {
    output.writeFieldBegin('replication_factor', Thrift.Type.I32, 4);
    output.writeI32(this.replication_factor);
    output.writeFieldEnd();
  }
  if (this.cf_defs != null) {
    output.writeFieldBegin('cf_defs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.cf_defs.length);
    for (var iter129 in this.cf_defs)
    {
      if (this.cf_defs.hasOwnProperty(iter129))
      {
        iter129 = this.cf_defs[iter129];
        iter129.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.durable_writes != null) {
    output.writeFieldBegin('durable_writes', Thrift.Type.BOOL, 6);
    output.writeBool(this.durable_writes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CqlRow = module.exports.CqlRow = function(args) {
  this.key = null;
  this.columns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
CqlRow.prototype = {};
CqlRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.columns = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = new ttypes.Column();
          elem136.read(input);
          this.columns.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CqlRow.prototype.write = function(output) {
  output.writeStructBegin('CqlRow');
  if (this.key != null) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.columns != null) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter137 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter137))
      {
        iter137 = this.columns[iter137];
        iter137.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CqlMetadata = module.exports.CqlMetadata = function(args) {
  this.name_types = null;
  this.value_types = null;
  this.default_name_type = null;
  this.default_value_type = null;
  if (args) {
    if (args.name_types !== undefined) {
      this.name_types = args.name_types;
    }
    if (args.value_types !== undefined) {
      this.value_types = args.value_types;
    }
    if (args.default_name_type !== undefined) {
      this.default_name_type = args.default_name_type;
    }
    if (args.default_value_type !== undefined) {
      this.default_value_type = args.default_value_type;
    }
  }
};
CqlMetadata.prototype = {};
CqlMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size138 = 0;
        var _rtmp3142;
        this.name_types = {};
        var _ktype139 = 0;
        var _vtype140 = 0;
        _rtmp3142 = input.readMapBegin();
        _ktype139 = _rtmp3142.ktype;
        _vtype140 = _rtmp3142.vtype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var key144 = null;
          var val145 = null;
          key144 = input.readBinary();
          val145 = input.readString();
          this.name_types[key144] = val145;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size146 = 0;
        var _rtmp3150;
        this.value_types = {};
        var _ktype147 = 0;
        var _vtype148 = 0;
        _rtmp3150 = input.readMapBegin();
        _ktype147 = _rtmp3150.ktype;
        _vtype148 = _rtmp3150.vtype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var key152 = null;
          var val153 = null;
          key152 = input.readBinary();
          val153 = input.readString();
          this.value_types[key152] = val153;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.default_name_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.default_value_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CqlMetadata.prototype.write = function(output) {
  output.writeStructBegin('CqlMetadata');
  if (this.name_types != null) {
    output.writeFieldBegin('name_types', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.name_types));
    for (var kiter154 in this.name_types)
    {
      if (this.name_types.hasOwnProperty(kiter154))
      {
        var viter155 = this.name_types[kiter154];
        output.writeString(kiter154);
        output.writeString(viter155);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.value_types != null) {
    output.writeFieldBegin('value_types', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.value_types));
    for (var kiter156 in this.value_types)
    {
      if (this.value_types.hasOwnProperty(kiter156))
      {
        var viter157 = this.value_types[kiter156];
        output.writeString(kiter156);
        output.writeString(viter157);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.default_name_type != null) {
    output.writeFieldBegin('default_name_type', Thrift.Type.STRING, 3);
    output.writeString(this.default_name_type);
    output.writeFieldEnd();
  }
  if (this.default_value_type != null) {
    output.writeFieldBegin('default_value_type', Thrift.Type.STRING, 4);
    output.writeString(this.default_value_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CqlResult = module.exports.CqlResult = function(args) {
  this.type = null;
  this.rows = null;
  this.num = null;
  this.schema = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
  }
};
CqlResult.prototype = {};
CqlResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.rows = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = new ttypes.CqlRow();
          elem164.read(input);
          this.rows.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.CqlMetadata();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CqlResult.prototype.write = function(output) {
  output.writeStructBegin('CqlResult');
  if (this.type != null) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rows != null) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter165 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter165))
      {
        iter165 = this.rows[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.num != null) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  if (this.schema != null) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 4);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

